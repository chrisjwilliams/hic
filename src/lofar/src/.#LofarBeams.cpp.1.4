#include "LofarBeams.h"
#include <QObject>
#include <QList>
#include <QString>
#include "hardware/ParameterGroup.h"
#include "lofar/LofarBeam.h"



namespace hic {


/**
 * @details Constructs a LofarBeams object.
 */
LofarBeams::LofarBeams()
{
    setName("LofarBeams");

    // Main Instrument Definitions
    ParameterGroup g(QString("Lofar Settings"));
    StateParameter clock(QObject::tr("clock"), "The clock frequency that the telescope is set");
    QMap<QString,QString> clockOptions;
    clockOptions["160 MHz"] = "160";
    clockOptions["200 MHz"] = "200";
    clock.setRestrictedValues(clockOptions);
    g.addParameter(clock);
    _groups.append(g);

    // setup the beam parameter groups
    int maxBeams = 8; // Lofar can support up to 8 beams
    for(int i=0; i < maxBeams; ++i )
    {
        ParameterGroup g(QString("Beam %1").arg( i+1 ));
        LofarBeam beam;
        addBeam(beam);
        g.enableDeactivation();
        if( i != 0 )
            g.setActiveState(false);

        // populate the group
        // output channel
        StateParameter dataStream(QObject::tr("Stream"), "The Stream on which to output the data. Maximum of 2 beams per Channel");
        QMap<QString,QString> dataStreamOptions;
        dataStreamOptions["Channel 1"] = "1";
        dataStreamOptions["Channel 2"] = "2";
        dataStreamOptions["Channel 3"] = "3";
        dataStreamOptions["Channel 4"] = "4";
        dataStream.setRestrictedValues( dataStreamOptions );
        g.addParameter(dataStream);

        // rcu mode
        StateParameter rcumode(QObject::tr("rcumode"), "The frequency filters to apply to the RCU");
        QMap<QString,QString> rcuOptions;
        rcuOptions["LBL 10MHz HPF"] = "1";
        rcuOptions["LBL 30MHz HPF"] = "2";
        rcuOptions["LBH 10MHz HPF"] = "3";
        rcuOptions["LBH 30MHz HPF"] = "4";
        rcuOptions["HB 110-190MHz"] = "5";
        rcuOptions["HB 170-230MHz"] = "6";
        rcuOptions["HB 210-270MHz"] = "7";
        rcumode.setRestrictedValues( rcuOptions );
        g.addParameter(rcumode);

        // add the finished group to the class
        _groups.append(g);
    }
}

/**
 * @details Destroys the LofarBeams object.
 */
LofarBeams::~LofarBeams()
{
}

LofarBeams* LofarBeams::clone() const
{
    return new LofarBeams( *this );
}

void LofarBeams::addBeam(const LofarBeam& beam)
{
    _beams.append(beam);
}

} // namespace hic
